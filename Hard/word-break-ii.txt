class Solution {
    fun wordBreak(s: String, wordDict: List<String>): List<String> {
         val wordSet = wordDict.toSet()
         val memo = mutableMapOf<String,List<String>>()
         return backTrack(s,wordSet,memo)
    }

    private fun backTrack(s: String, wordSet: Set<String>, memo : MutableMap<String,List<String>>): List<String>{

      val result = mutableListOf<String>()

      if(s.isEmpty()){
        result.add("")
        return result
      }

      for (word in wordSet){
        println("word="+word+" ,string s="+s)
        if(s.startsWith(word)){
              println("inside if ="+word)
            val sublist = backTrack(s.substring(word.length),wordSet, memo)
             println("sublist="+sublist)
            for(sub in sublist){
                result.add(if(sub.isEmpty()) word else "$word $sub")
            }

        }
      }

  
      memo[s] = result
      return result

    }
   
}